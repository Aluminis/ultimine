plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id 'org.jreleaser' version '1.17.0'
}

version = System.getenv("GITHUB_VERSION") ?: '0.0.0-alpha'
group = project.maven_group
def archiveName = project.archives_base_name

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"ultimine" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.aluminis:aluminis-inject:2.0.0-alpha"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

jreleaser {
	deploy {
		maven {
			//noinspection GroovyAssignabilityCheck
			mavenCentral {
				central {
					active = 'ALWAYS'
					url = 'https://central.sonatype.com/api/v1/publisher'
					retryDelay = 30
					stagingRepositories = ['build/repo']
					applyMavenCentralRules = true
				}
			}
		}
	}

	signing {
		setActive('ALWAYS')
		setArmored(true)
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			pom {
				description = project.repo_description
				url = "https://github.com/Aluminis/${archiveName}"
				name = project.archives_base_name
				licenses {
					license {
						name.set("The Apache License, Version 2.0")
					}
				}
				developers {
					developer {
						name = 'KraftyKaleb'
					}
				}
				scm {
					connection = "scm:git:git://github.com/Aluminis/${archiveName}.git"
					developerConnection = "scm:git:git://github.com/Aluminis/${archiveName}.git"
					url = "https://github.com/Aluminis/${archiveName}"
				}
			}

			artifactId = project.archives_base_name
			version = project.version
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		maven {
			url = uri(layout.buildDirectory.dir("repo"))
		}
	}
}